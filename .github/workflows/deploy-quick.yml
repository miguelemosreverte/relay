name: Quick Update (Go Binary Only)

on:
  push:
    branches: [ main ]
    paths:
      - 'relay-server.go'
      - 'go.mod'
      - 'go.sum'
  workflow_dispatch:

jobs:
  quick-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Build for ARM64
      run: |
        GOOS=linux GOARCH=arm64 go build -o relay-server-arm64 relay-server.go
        chmod +x relay-server-arm64
        echo "Binary size: $(du -h relay-server-arm64 | cut -f1)"
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.HETZNER_SSH_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan -H ${{ secrets.HETZNER_HOST }} >> ~/.ssh/known_hosts
    
    - name: Check current server
      id: check
      run: |
        if curl -f -m 5 https://${{ secrets.HETZNER_HOST }}.nip.io/health 2>/dev/null; then
          echo "‚úÖ Server is running"
          echo "SERVER_RUNNING=true" >> $GITHUB_OUTPUT
        else
          echo "‚ö†Ô∏è Server is not responding"
          echo "SERVER_RUNNING=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Deploy updated binary
      if: steps.check.outputs.SERVER_RUNNING == 'true'
      run: |
        echo "üì¶ Uploading new binary..."
        scp -i ~/.ssh/id_ed25519 relay-server-arm64 ${{ secrets.HETZNER_USERNAME }}@${{ secrets.HETZNER_HOST }}:/root/relay/relay-server-arm64.new
        
        echo "üîÑ Performing zero-downtime replacement..."
        ssh -i ~/.ssh/id_ed25519 ${{ secrets.HETZNER_USERNAME }}@${{ secrets.HETZNER_HOST }} "
          cd /root/relay
          
          # Backup current binary
          cp relay-server-arm64 relay-server-arm64.backup 2>/dev/null || true
          
          # Replace binary
          mv relay-server-arm64.new relay-server-arm64
          chmod +x relay-server-arm64
          
          # Gracefully restart
          OLD_PID=\$(pgrep -f relay-server-arm64 | head -1)
          
          # Start new instance
          nohup ./relay-server-arm64 > server.log 2>&1 &
          NEW_PID=\$!
          
          # Wait for new instance to be ready
          sleep 3
          
          # Kill old instance if it exists
          if [ ! -z \"\$OLD_PID\" ]; then
            kill \$OLD_PID 2>/dev/null || true
          fi
          
          echo \"‚úÖ Quick update complete! New PID: \$NEW_PID\"
        "
    
    - name: Run full deployment if server is down
      if: steps.check.outputs.SERVER_RUNNING == 'false'
      run: |
        echo "‚ö†Ô∏è Server is not running. Please run the Full Deployment workflow instead."
        echo "Go to: Actions -> Full Deployment -> Run workflow"
        exit 1
    
    - name: Verify deployment
      if: steps.check.outputs.SERVER_RUNNING == 'true'
      run: |
        echo "‚è≥ Waiting for server to stabilize..."
        sleep 5
        
        # Check health
        RESPONSE=$(curl -s https://${{ secrets.HETZNER_HOST }}.nip.io/health)
        echo "Health check response: $RESPONSE"
        
        if echo "$RESPONSE" | grep -q "healthy"; then
          echo "‚úÖ Quick update successful!"
        else
          echo "‚ùå Update verification failed"
          
          # Attempt rollback
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.HETZNER_USERNAME }}@${{ secrets.HETZNER_HOST }} "
            cd /root/relay
            if [ -f relay-server-arm64.backup ]; then
              echo 'Rolling back to previous version...'
              pkill -f relay-server-arm64 || true
              mv relay-server-arm64.backup relay-server-arm64
              nohup ./relay-server-arm64 > server.log 2>&1 &
            fi
          "
          exit 1
        fi
    
    - name: Performance check
      if: steps.check.outputs.SERVER_RUNNING == 'true'
      run: |
        echo "üìä Quick performance check..."
        
        # Simple latency test
        START=$(date +%s%N)
        curl -s https://${{ secrets.HETZNER_HOST }}.nip.io/health > /dev/null
        END=$(date +%s%N)
        LATENCY=$((($END - $START) / 1000000))
        
        echo "Health endpoint latency: ${LATENCY}ms"
        
        if [ $LATENCY -gt 1000 ]; then
          echo "‚ö†Ô∏è Warning: High latency detected"
        else
          echo "‚úÖ Performance looks good"
        fi