name: Deploy and Benchmark

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.HETZNER_SSH_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
    
    - name: Test SSH
      run: |
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            -i ~/.ssh/id_ed25519 \
            root@95.217.238.72 "echo 'SSH works'"
    
    - name: Run deployment script
      run: |
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            -i ~/.ssh/id_ed25519 \
            root@95.217.238.72 "/root/deploy.sh"
    
    - name: Verify deployment
      run: |
        sleep 5
        curl -s https://95.217.238.72.nip.io/health | grep healthy
    
    - name: Setup Node for benchmarks
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install benchmark dependencies
      run: npm install ws --no-save
    
    - name: Run benchmark
      run: |
        echo "ðŸ“Š Running performance benchmark..."
        
        # First, verify server is reachable
        curl -s https://95.217.238.72.nip.io/health || echo "Warning: Server may not be ready"
        
        cat > benchmark.js << 'EOF'
        const WebSocket = require('ws');
        const fs = require('fs');
        
        async function runBenchmark() {
            console.log('ðŸš€ Running benchmark against https://95.217.238.72.nip.io');
            
            const results = {
                timestamp: new Date().toISOString(),
                commit: '${{ github.sha }}',
                metrics: {
                    messages_per_second: 0,
                    bandwidth_mbps: 0,
                    total_messages: 0,
                    total_bytes: 0,
                    latency_ms: 0,
                    connected_users: 2
                }
            };
            
            const startTime = Date.now();
            let messagesSent = 0;
            let messagesReceived = 0;
            let bytesTransferred = 0;
            let latencies = [];
            
            try {
                console.log('Connecting to WebSocket server...');
                const ws1 = new WebSocket('wss://95.217.238.72.nip.io/ws/bench1');
                const ws2 = new WebSocket('wss://95.217.238.72.nip.io/ws/bench2');
                
                await new Promise((resolve, reject) => {
                    let ws1Open = false;
                    let ws2Open = false;
                    
                    // Add connection timeout
                    const connectionTimeout = setTimeout(() => {
                        reject(new Error('Connection timeout after 30 seconds'));
                    }, 30000);
                    
                    ws1.on('open', () => {
                        console.log('Client 1 connected');
                        ws1Open = true;
                        if (ws2Open) {
                            clearTimeout(connectionTimeout);
                            startTest();
                        }
                    });
                    
                    ws2.on('open', () => {
                        console.log('Client 2 connected');
                        ws2Open = true;
                        if (ws1Open) {
                            clearTimeout(connectionTimeout);
                            startTest();
                        }
                    });
                    
                    ws1.on('error', (err) => {
                        clearTimeout(connectionTimeout);
                        reject(err);
                    });
                    ws2.on('error', (err) => {
                        clearTimeout(connectionTimeout);
                        reject(err);
                    });
                    
                    function startTest() {
                        const interval = setInterval(() => {
                            if (Date.now() - startTime > 10000) {
                                clearInterval(interval);
                                const duration = (Date.now() - startTime) / 1000;
                                results.metrics.messages_per_second = messagesReceived / duration;
                                results.metrics.total_messages = messagesReceived;
                                results.metrics.total_bytes = bytesTransferred;
                                results.metrics.bandwidth_mbps = (bytesTransferred * 8) / (duration * 1000000);
                                if (latencies.length > 0) {
                                    results.metrics.latency_ms = latencies.reduce((a, b) => a + b, 0) / latencies.length;
                                }
                                ws1.close();
                                ws2.close();
                                resolve();
                                return;
                            }
                            
                            const sendTime = Date.now();
                            const msg = JSON.stringify({
                                id: messagesSent++,
                                timestamp: sendTime,
                                data: 'x'.repeat(1000)
                            });
                            ws1.send(msg);
                            bytesTransferred += msg.length;
                        }, 10);
                    }
                    
                    ws2.on('message', (data) => {
                        messagesReceived++;
                        try {
                            const msg = JSON.parse(data);
                            if (msg.timestamp) {
                                latencies.push(Date.now() - msg.timestamp);
                            }
                        } catch {}
                    });
                });
                
            } catch (error) {
                console.error('Benchmark error:', error.message);
                results.error = error.message;
            }
            
            console.log('âœ… Benchmark complete!');
            console.log('  Throughput:', results.metrics.messages_per_second.toFixed(2), 'msg/s');
            console.log('  Bandwidth:', results.metrics.bandwidth_mbps.toFixed(2), 'Mbps');
            console.log('  Latency:', results.metrics.latency_ms.toFixed(2), 'ms');
            
            fs.writeFileSync('benchmark-results.json', JSON.stringify(results, null, 2));
        }
        
        runBenchmark().catch(console.error);
        EOF
        
        node benchmark.js
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-${{ github.sha }}
        path: benchmark-results.json
    
    - name: Update GitHub Pages
      run: |
        # Clone gh-pages branch
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
        # Try to clone gh-pages, create if doesn't exist
        git clone -b gh-pages https://github.com/${{ github.repository }}.git gh-pages 2>/dev/null || {
          mkdir gh-pages
          cd gh-pages
          git init
          git checkout -b gh-pages
          cd ..
        }
        
        # Ensure reports directory exists
        mkdir -p gh-pages/reports/${{ github.sha }}
        
        # Copy benchmark results
        cp benchmark-results.json gh-pages/reports/${{ github.sha }}/
        
        # Update index.json
        cd gh-pages/reports
        if [ ! -f index.json ]; then
          echo '{"reports":[]}' > index.json
        fi
        
        # Add new report to index using Python
        python3 << EOF
        import json
        import os
        
        # Load benchmark results
        with open('../../benchmark-results.json', 'r') as f:
            results = json.load(f)
        
        # Load existing index
        with open('index.json', 'r') as f:
            index = json.load(f)
        
        # Add new entry
        new_entry = {
            "commit": "${{ github.sha }}",
            "timestamp": results['timestamp'],
            "actor": "${{ github.actor }}",
            "branch": "${{ github.ref_name }}",
            "throughput": results['metrics']['messages_per_second'],
            "latency": results['metrics']['latency_ms'],
            "bandwidth": results['metrics']['bandwidth_mbps'],
            "totalMessages": results['metrics']['total_messages'],
            "totalBytes": results['metrics']['total_bytes']
        }
        
        # Add to beginning and keep last 50
        index['reports'].insert(0, new_entry)
        index['reports'] = index['reports'][:50]
        
        # Save updated index
        with open('index.json', 'w') as f:
            json.dump(index, f, indent=2)
        EOF
        
        cd ../..
        
        # Copy dashboard files if they exist
        if [ -d docs ]; then
          cp -r docs/* gh-pages/ 2>/dev/null || true
        fi
        
        # Commit and push to gh-pages
        cd gh-pages
        git add .
        git commit -m "ðŸ“Š Update benchmark for ${{ github.sha }}" || echo "No changes to commit"
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git gh-pages --force